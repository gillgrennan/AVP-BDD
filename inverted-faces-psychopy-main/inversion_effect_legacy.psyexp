<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.1.1">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/sub-%s_task-%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': '', 'session': '', 'order': '1,2,3,4', 'EEG': 'False', 'EyeLink': 'False', 'EyeTribe': 'False', 'Calibrate': 'False'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="fileList" updates="None" name="Resources"/>
    <Param val="True" valType="bool" updates="None" name="Save csv file"/>
    <Param val="True" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="2024.1.0" valType="str" updates="None" name="Use version"/>
    <Param val="[1440, 900]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="inversion_effect" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="debug" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="getReady">
      <RoutineSettingsComponent name="getReady" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="getReady" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_countdown" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_countdown" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$str(5-int(t))" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="Fixation">
      <RoutineSettingsComponent name="Fixation" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Fixation" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="drift_correction" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# we recommend drift-check at the beginning of each trial, in an MRI&amp;#10;# setup, however, this is not possible and one can do online drift-&amp;#10;# correction if needed&amp;#10;# the doDriftCorrect() function requires target position in integers&amp;#10;# the last two arguments:&amp;#10;# draw_target (1-default, 0-draw the target then call doDriftCorrect)&amp;#10;# allow_setup (1-press ESCAPE to recalibrate, 0-not allowed)&amp;#10;#&amp;#10;# Skip drift-check if running the script in Dummy Mode&amp;#10;#while not dummy_mode:&amp;#10;#    # terminate the task if no longer connected to the tracker or&amp;#10;#    # user pressed Ctrl-C to terminate the task&amp;#10;#    if (not el_tracker.isConnected()) or el_tracker.breakPressed():&amp;#10;#        terminate_task()&amp;#10;#&amp;#10;#    # drift-check and re-do camera setup if ESCAPE is pressed&amp;#10;#    try:&amp;#10;#        error = el_tracker.doDriftCorrect(int(scn_width/2.0),&amp;#10;#                                          int(scn_height/2.0), 1, 1)&amp;#10;#        # break following a success drift-check&amp;#10;#        if error is not pylink.ESC_KEY:&amp;#10;#            break&amp;#10;#    except:&amp;#10;#        pass" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="drift_correction" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_fixation" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# index trials for eyetracking&amp;#10;trial_index=0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="EEGtriggerSent = False&amp;#10;EYEtriggerSent = False&amp;#10;trial_index += 1&amp;#10;&amp;#10;# log a TRIALID message to mark trial start, before starting to record.&amp;#10;# EyeLink Data Viewer defines the start of a trial by the TRIALID message.&amp;#10;if expInfo['EyeLink']:&amp;#10;    el_tracker.sendMessage(&quot;TRIALID %d&quot; % trial_index)&amp;#10;if expInfo['EyeTribe']:&amp;#10;    tracker.log_message(&quot;TRIALID %d&quot; % trial_index)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if expInfo['EEG'] and text_fixation.status == STARTED and not EEGtriggerSent:&amp;#10;    #win.callOnFlip(ns.send_event, event_type=&quot;FXN+&quot;,label=&quot;FXN+&quot;,duration=float(fix_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    EEGtriggerSent = True&amp;#10;if expInfo['EyeLink'] and text_fixation.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(el_tracker.sendMessage,&quot;FXN+&quot;) # fixation marker&amp;#10;    EYEtriggerSent = True&amp;#10;if expInfo['EyeTribe'] and text_fixation.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(tracker.log_message,&quot;FXN+&quot;) # fixation marker&amp;#10;    EYEtriggerSent = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_fixation" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_fixation" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="0.5" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_fixation" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="fix_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="EncodeFaces">
      <RoutineSettingsComponent name="EncodeFaces" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="EncodeFaces" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_encodeFaces" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="EEGtriggerSent = False&amp;#10;EYEtriggerSent = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if expInfo['eeg'] and fix_cross_faces.status == STARTED and not EEGtriggerSent:&amp;#10;    win.callOnFlip(ns.send_event,event_type=&quot;STIM&quot;,label=TRG,duration=float(target_face_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    EEGtriggerSent = True&amp;#10;if expInfo['eyetrack'] and fix_cross_faces.status == STARTED and not EYEtriggerSent:&amp;#10;     win.callOnFlip(tracker.log_message,TRG)&amp;#10;     EYEtriggerSent = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="#if expInfo['eeg']:&amp;#10;#    ns.send_event(event_type=TRG, start=fix_cross_faces.started)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_encodeFaces" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="fix_cross_faces" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli/fix.BMP" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="fix_cross_faces" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.3, 0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$target_face_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="target_face" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$target_1" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="target_face" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-0.1, 0.15)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$target_face_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
    </Routine>
    <Routine name="ProbeFaces">
      <RoutineSettingsComponent name="ProbeFaces" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ProbeFaces" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_probeFaces" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="prbL = &quot;white&quot;;&amp;#10;prbR = &quot;white&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="EEGtriggerSent = False&amp;#10;EYEtriggerSent = False&amp;#10;&amp;#10;prbL=&quot;white&quot;&amp;#10;prbR=&quot;white&quot;&amp;#10;&amp;#10;rspprobe=0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="if expInfo['eeg'] and probe_image.status == STARTED and not EEGtriggerSent:&amp;#10;    win.callOnFlip(ns.send_event,event_type=&quot;PRB+&quot;,label=PRB,duration=float(probe_face_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    EEGtriggerSent = True&amp;#10;if expInfo['eyetrack'] and probe_image.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(tracker.log_message,PRB)&amp;#10;    EYEtriggerSent = True&amp;#10;&amp;#10;if key_resp_face:&amp;#10;    if key_resp_face.keys=='1':&amp;#10;        prbL=&quot;blue&quot;&amp;#10;        if expInfo['eeg'] and rspprobe==0:&amp;#10;            ns.send_event(event_type=&quot;RESP&quot;,label=&quot;RSPL&quot;)&amp;#10;            rspprobe=1&amp;#10;    elif key_resp_face.keys=='2':&amp;#10;        prbR=&quot;blue&quot;&amp;#10;        if expInfo['eeg'] and rspprobe==0:&amp;#10;            ns.send_event(event_type=&quot;RESP&quot;,label=&quot;RSPR&quot;)&amp;#10;            rspprobe=1" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (key_resp_face) {&amp;#10;    if ((key_resp_face.keys === &quot;1&quot;) || (key_resp_face.keys === &quot;left&quot;)) {&amp;#10;        prbL = &quot;blue&quot;;&amp;#10;    } else {&amp;#10;        if ((key_resp_face.keys === &quot;2&quot;) || (key_resp_face.keys === &quot;right&quot;)) {&amp;#10;            prbR = &quot;blue&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="s_key = key_resp_face.keys;&amp;#10;if ((s_key === &quot;s&quot;)) {&amp;#10;    faces.finished = true;&amp;#10;}&amp;#10;&amp;#10;thisExp=psychoJS.experiment;&amp;#10;&amp;#10;if ((correct_resp === 1) || (correct_resp === &quot;1&quot;)) {&amp;#10;    correctKey = [&quot;1&quot;,&quot;left&quot;];&amp;#10;}&amp;#10;if ((correct_resp === 2) || (correct_resp === &quot;2&quot;)) {&amp;#10;    correctKey = [&quot;2&quot;,&quot;right&quot;];&amp;#10;}&amp;#10;&amp;#10;if ((key_resp_face.keys === correctKey[0]) || (key_resp_face.keys === correctKey[1])) {&amp;#10;    key_resp_face.corr = true;&amp;#10;} else {&amp;#10;    key_resp_face.corr = false;&amp;#10;}&amp;#10;&amp;#10;thisExp.addData(&quot;correctKey&quot;, correctKey);&amp;#10;thisExp.addData(&quot;key_resp_corr&quot;, key_resp_face.corr)" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if expInfo['eeg'] and rspprobe==0:&amp;#10;    ns.send_event(event_type=&quot;RESP&quot;,label=&quot;MISS&quot;)&amp;#10;    rspprobe=1" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_probeFaces" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="probe_image" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$probe_list" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="probe_image" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_face_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_face" plugin="None">
        <Param val="'1','left','2','right','s'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_face" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="faces_LEFT" plugin="None">
        <Param val="$prbL" valType="str" updates="set every frame" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="RTL" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="code" updates="constant" name="letterHeight"/>
        <Param val="faces_LEFT" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-0.20,-0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_face_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="&lt;--&amp;#10;Same" valType="extendedStr" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="faces_RIGHT" plugin="None">
        <Param val="$prbR" valType="str" updates="set every frame" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="code" updates="constant" name="letterHeight"/>
        <Param val="faces_RIGHT" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.20,-0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_face_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="--&gt;&amp;#10;Different" valType="extendedStr" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="instrFaces">
      <RoutineSettingsComponent name="instrFaces" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instrFaces" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_restartNS" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if expInfo['eeg']:&amp;#10;    # import egi_pynetstation&amp;#10;    from egi_pynetstation.NetStation import NetStation&amp;#10;    # address and port &amp;#10;    ns = NetStation('169.254.111.111', 55513)&amp;#10;    # Set an NTP clock server address as an IPv4 string&amp;#10;    IP_ntp = '169.254.111.111'&amp;#10;    ns.connect(ntp_ip=IP_ntp)&amp;#10;    ns.begin_rec() # Begin recording&amp;#10;    ns.send_event(event_type=&quot;STRT&quot;,label=&quot;STRT&quot;,start=0.0)&amp;#10;    # NOTE: when using the event sender, &quot;now&quot;.&amp;#10;    # Tests on a Windows 7 machine with PsychoPy indicate that the&amp;#10;    # latency in real time is about 54 +/- 3 ms for a short experiment.&amp;#10;&amp;#10;RunningClock = globalClock.getTime()&amp;#10;thisExp.addData('RunningClock',RunningClock)&amp;#10;&amp;#10;if expInfo['eyetrack']:&amp;#10;    # import pytribe&amp;#10;    from PyTribe.pytribe import EyeTribe&amp;#10;    # Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc&amp;#10;    SUB = u'sub-%s' % (expInfo['participant'])&amp;#10;    TIMESTRT = time.strftime(&quot;%Y%m%dT%H%M%S&quot;)&amp;#10;    EYELOG = u'sub-%s_task-%s_eyetrack_%s' % (expInfo['participant'], expName, TIMESTRT)&amp;#10;    DIR = os.path.dirname(os.path.abspath(__file__))&amp;#10;    LOGFILE = os.path.join(DIR, 'data', EYELOG)&amp;#10;    # start communications with the EyeTribe tracker&amp;#10;    tracker = EyeTribe(logfilename=LOGFILE)&amp;#10;    # start recording gaze data&amp;#10;    tracker.start_recording()&amp;#10;    tracker.log_message(&quot;STRT&quot;)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_restartNS" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_faces" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_faces" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$&quot;In this experiment you will see one face flash before you, this is the target face. You will then see two faces. The faces may either appear upright or upside-down. You must select the face that looks exactly like the target face.&quot; + &quot;\n Please press 1 to choose the face on the left side of the screen, press 2 to choose the face on the right side of the screen with the fingers of your preferred hand. Make your choice both as quickly and accurately as you can. Press the spacebar to continue.&quot;" valType="extendedStr" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrBodies">
      <RoutineSettingsComponent name="instrBodies" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instrBodies" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_hardware" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;if expInfo['EEG']:&amp;#10;    # import egi_pynetstation&amp;#10;    from egi_pynetstation.NetStation import NetStation&amp;#10;    # address and port &amp;#10;    ns = NetStation('169.254.111.111', 55513)&amp;#10;    # Set an NTP clock server address as an IPv4 string&amp;#10;    IP_ntp = '169.254.111.111'&amp;#10;    ns.connect(ntp_ip=IP_ntp)&amp;#10;    ns.begin_rec() # Begin recording&amp;#10;    ns.send_event(event_type=&quot;STRT&quot;,label=&quot;STRT&quot;,start=0.0)&amp;#10;    # NOTE: when using the event sender, &quot;now&quot;.&amp;#10;    # Tests on a Windows 7 machine with PsychoPy indicate that the&amp;#10;    # latency in real time is about 54 +/- 3 ms for a short experiment.&amp;#10;&amp;#10;RunningClock = globalClock.getTime()&amp;#10;thisExp.addData('RunningClock',RunningClock)&amp;#10;&amp;#10;if expInfo['Eyetribe']:&amp;#10;    # import pytribe&amp;#10;    from PyTribe.pytribe import EyeTribe&amp;#10;    # Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc&amp;#10;    SUB = u'sub-%s' % (expInfo['participant'])&amp;#10;    TIMESTRT = time.strftime(&quot;%Y%m%dT%H%M%S&quot;)&amp;#10;    #EYELOG = SUB + '_task-swm_acq-eyetribe_eyetrack_' + TIMESTRT&amp;#10;    EYELOG = u'sub-%s_task-sdrt_eyetrack_%s' % (expInfo['participant'], TIMESTRT)&amp;#10;    DIR = os.path.dirname(os.path.abspath(__file__))&amp;#10;    LOGFILE = os.path.join(DIR, 'data', EYELOG)&amp;#10;    #EYELOG = _thisDir + os.sep + u'data/sub-%s_task-%s_eyetrack_%s' % (expInfo['participant'], expName, expInfo['date'])&amp;#10;    # start communications with the EyeTribe tracker&amp;#10;    tracker = EyeTribe(logfilename=LOGFILE)&amp;#10;    # start recording gaze data&amp;#10;    tracker.start_recording()&amp;#10;    #tracker.log_message(&quot;recording_started&quot;)&amp;#10;    tracker.log_message(&quot;STRT&quot;)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="#if expInfo['eeg']:&amp;#10;#    ns.end_rec()&amp;#10;#    ns.disconnect()&amp;#10;    &amp;#10;#if expInfo['eyetrack']:&amp;#10;    # stop recording&amp;#10;#    tracker.stop_recording()&amp;#10;    # close connection to the tracker&amp;#10;#    tracker.close()" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="document.body.style.cursor='auto';" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_hardware" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_instruct" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instruct" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$&quot;In this experiment you will see one body flash before you, this is the target body. You will then see two bodies. The bodies may either appear upright or upside-down. You must select the body that looks exactly like the target body.&quot; + &quot;\n Please press 1 to choose the body on the left side of the screen, press 2 to choose the body on the right side of the screen with the fingers of your preferred hand. Make your choice both as quickly and accurately as you can. Press the spacebar to continue.&quot;" valType="extendedStr" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="start_resp" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="start_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Start">
      <RoutineSettingsComponent name="Start" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Start" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="EyelinkCode" plugin="None">
        <Param val="#import pylink&amp;#10;import platform&amp;#10;import time&amp;#10;import random as randomITI&amp;#10;#from hardware.EyeLinkCoreGraphicsPsychoPy import EyeLinkCoreGraphicsPsychoPy&amp;#10;from psychopy import monitors&amp;#10;from string import ascii_letters, digits" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Set this variable to True if you use the built-in retina screen as your&amp;#10;# primary display device on macOS. If have an external monitor, set this&amp;#10;# variable True if you choose to &quot;Optimize for Built-in Retina Display&quot;&amp;#10;# in the Displays preference settings.&amp;#10;use_retina = False&amp;#10;&amp;#10;# Set this variable to True to run the script in &quot;Dummy Mode&quot;&amp;#10;#dummy_mode = True&amp;#10;&amp;#10;# Set this variable to True to run the task in full screen mode&amp;#10;# It is easier to debug the script in non-fullscreen mode&amp;#10;full_screen = True&amp;#10;&amp;#10;# Set up EDF data file name and local data folder&amp;#10;#&amp;#10;# The EDF data filename should not exceed 8 alphanumeric characters&amp;#10;# use ONLY number 0-9, letters, &amp; _ (underscore) in the filename&amp;#10;participant_id = expInfo['participant'][:5]  # Limit participant ID to 5 chars&amp;#10;session_num = expInfo['session'][:1]  # Assume session info is provided in expInfo&amp;#10;edf_fname = f'{participant_id}IE{session_num}'&amp;#10;&amp;#10;if expInfo['EyeLink']:&amp;#10;    # Validate filename: Only keep allowed characters&amp;#10;    allowed_char = ascii_letters + digits + '_'&amp;#10;    edf_fname = ''.join([c for c in edf_fname if c in allowed_char])&amp;#10;&amp;#10;    if len(edf_fname) == 0:&amp;#10;        print(&quot;ERROR: Invalid or empty participant ID for EDF filename.&quot;)&amp;#10;        core.quit()  # Exit if no valid filename is generated&amp;#10;&amp;#10;# Set up a folder to store the EDF data files and the associated resources&amp;#10;# e.g., files defining the interest areas used in each trial&amp;#10;results_folder = 'data'&amp;#10;if not os.path.exists(results_folder):&amp;#10;    os.makedirs(results_folder)&amp;#10;&amp;#10;# We download EDF data file from the EyeLink Host PC to the local hard&amp;#10;# drive at the end of each testing session, here we rename the EDF to&amp;#10;# include session start date/time&amp;#10;time_str = time.strftime(&quot;_%Y-%m-%dT%H%M&quot;, time.localtime())&amp;#10;session_sname=u'sub-%s' % (expInfo['participant'])&amp;#10;session_edfname = session_sname + '_task-IET_eyetrack'&amp;#10;session_identifier = session_edfname + time_str&amp;#10;&amp;#10;# create a folder for the current testing session in the &quot;results&quot; folder&amp;#10;session_folder = os.path.join(results_folder, session_sname, 'eyetrack')&amp;#10;if not os.path.exists(session_folder):&amp;#10;    os.makedirs(session_folder)&amp;#10;&amp;#10;# Step 1: Connect to the EyeLink Host PC&amp;#10;#&amp;#10;# The Host IP address, by default, is &quot;100.1.1.1&quot;.&amp;#10;# the &quot;el_tracker&quot; objected created here can be accessed through the Pylink&amp;#10;# Set the Host PC address to &quot;None&quot; (without quotes) to run the script&amp;#10;# in &quot;Dummy Mode&quot;&amp;#10;#if dummy_mode:&amp;#10;if not expInfo['EyeLink']:&amp;#10;    dummy_mode = True&amp;#10;    el_tracker = pylink.EyeLink(None)&amp;#10;else:&amp;#10;    dummy_mode = False&amp;#10;    try:&amp;#10;        el_tracker = pylink.EyeLink(&quot;100.1.1.1&quot;)&amp;#10;    except RuntimeError as error:&amp;#10;        print('ERROR:', error)&amp;#10;        core.quit()&amp;#10;        sys.exit()&amp;#10;&amp;#10;# Step 2: Open an EDF data file on the Host PC&amp;#10;edf_file = edf_fname + &quot;.edf&quot;&amp;#10;try:&amp;#10;    el_tracker.openDataFile(edf_file)&amp;#10;except RuntimeError as err:&amp;#10;    print('ERROR:', err)&amp;#10;    # close the link if we have one open&amp;#10;    if el_tracker.isConnected():&amp;#10;        el_tracker.close()&amp;#10;    core.quit()&amp;#10;    sys.exit()&amp;#10;&amp;#10;# Add a header text to the EDF file to identify the current experiment name&amp;#10;# This is OPTIONAL. If your text starts with &quot;RECORDED BY &quot; it will be&amp;#10;# available in DataViewer's Inspector window by clicking&amp;#10;# the EDF session node in the top panel and looking for the &quot;Recorded By:&quot;&amp;#10;# field in the bottom panel of the Inspector.&amp;#10;preamble_text = 'RECORDED BY %s' % os.path.basename(__file__)&amp;#10;el_tracker.sendCommand(&quot;add_file_preamble_text '%s'&quot; % preamble_text)&amp;#10;&amp;#10;# Step 3: Configure the tracker&amp;#10;#&amp;#10;# Put the tracker in offline mode before we change tracking parameters&amp;#10;el_tracker.setOfflineMode()&amp;#10;&amp;#10;# Get the software version:  1-EyeLink I, 2-EyeLink II, 3/4-EyeLink 1000,&amp;#10;# 5-EyeLink 1000 Plus, 6-Portable DUO&amp;#10;eyelink_ver = 0  # set version to 0, in case running in Dummy mode&amp;#10;if not dummy_mode:&amp;#10;    vstr = el_tracker.getTrackerVersionString()&amp;#10;    eyelink_ver = int(vstr.split()[-1].split('.')[0])&amp;#10;    # print out some version info in the shell&amp;#10;    print('Running experiment on %s, version %d' % (vstr, eyelink_ver))&amp;#10;&amp;#10;# File and Link data control&amp;#10;# what eye events to save in the EDF file, include everything by default&amp;#10;file_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT'&amp;#10;# what eye events to make available over the link, include everything by default&amp;#10;link_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT'&amp;#10;# what sample data to save in the EDF data file and to make available&amp;#10;# over the link, include the 'HTARGET' flag to save head target sticker&amp;#10;# data for supported eye trackers&amp;#10;if eyelink_ver &gt; 3:&amp;#10;    # add &quot;HTARGET&quot; to record possible target data for EyeLink Remote.&amp;#10;    # HMARKER (originally for Eyelink2's infrared head tracking markers) and&amp;#10;    # INPUT (originally for the TTL lines) are jury-rigged to hold the extra data.&amp;#10;    # You can also set file_sample_data to collect raw samples in the .edf file.&amp;#10;    # CAUTION: It may or may not work on your setup with your tracker.&amp;#10;    file_sample_flags = 'LEFT,RIGHT,GAZE,AREA,GAZERES,HREF,PUPIL,STATUS,HTARGET,INPUT,HMARKER'&amp;#10;    #file_sample_flags = 'LEFT,RIGHT,GAZE,AREA,GAZERES,HREF,PUPIL,STATUS,INPUT,HMARKER'&amp;#10;    link_sample_flags = 'LEFT,RIGHT,GAZE,AREA,GAZERES,HREF,PUPIL,STATUS,INPUT,HMARKER'&amp;#10;else:&amp;#10;    file_sample_flags = 'LEFT,RIGHT,GAZE,HREF,RAW,AREA,GAZERES,BUTTON,STATUS,INPUT'&amp;#10;    link_sample_flags = 'LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT'&amp;#10;el_tracker.sendCommand(&quot;file_event_filter = %s&quot; % file_event_flags)&amp;#10;el_tracker.sendCommand(&quot;file_sample_data = %s&quot; % file_sample_flags)&amp;#10;el_tracker.sendCommand(&quot;link_event_filter = %s&quot; % link_event_flags)&amp;#10;el_tracker.sendCommand(&quot;link_sample_data = %s&quot; % link_sample_flags)&amp;#10;&amp;#10;# Optional tracking parameters&amp;#10;# Sample rate, 250, 500, 1000, or 2000, check your tracker specification&amp;#10;if eyelink_ver &gt; 2:&amp;#10;    el_tracker.sendCommand(&quot;sample_rate 500&quot;)&amp;#10;# Choose a calibration type, H3, HV3, HV5, HV13 (HV = horizontal/vertical),&amp;#10;el_tracker.sendCommand(&quot;calibration_type = HV13&quot;)&amp;#10;# Set a gamepad button to accept calibration/drift check target&amp;#10;# You need a supported gamepad/button box that is connected to the Host PC&amp;#10;#el_tracker.sendCommand(&quot;button_function 5 'accept_target_fixation'&quot;)&amp;#10;&amp;#10;# Optional -- Shrink the spread of the calibration/validation targets&amp;#10;# if the default outermost targets are not all visible in the bore.&amp;#10;# The default &lt;x, y display proportion&gt; is 0.88, 0.83 (88% of the display&amp;#10;# horizontally and 83% vertically)&amp;#10;#el_tracker.sendCommand('calibration_area_proportion 0.88 0.83')&amp;#10;#el_tracker.sendCommand('validation_area_proportion 0.88 0.83')&amp;#10;&amp;#10;# Step 4: set up a graphics environment for calibration&amp;#10;#&amp;#10;# Open a window, be sure to specify monitor parameters&amp;#10;mon = monitors.Monitor('myMonitor', width=24.0, distance=75.0)&amp;#10;&amp;#10;# Setup the Window&amp;#10;#win = visual.Window(&amp;#10;#    size=[1920, 1080], fullscr=full_screen, screen=1,&amp;#10;#    winType='pyglet', allowGUI=True, allowStencil=False,&amp;#10;#    monitor=mon, color=[0.300,0.300,0.300], colorSpace='rgb',&amp;#10;#    blendMode='avg', useFBO=True,&amp;#10;#    units='pix')&amp;#10;&amp;#10;# store frame rate of monitor if we can measure it&amp;#10;expInfo['frameRate'] = win.getActualFrameRate()&amp;#10;if expInfo['frameRate'] != None:&amp;#10;    frameDur = 1.0 / round(expInfo['frameRate'])&amp;#10;else:&amp;#10;    frameDur = 1.0 / 60.0  # could not measure, so guess&amp;#10;&amp;#10;# get the native screen resolution used by PsychoPy&amp;#10;scn_width, scn_height = win.size&amp;#10;# resolution fix for Mac retina displays&amp;#10;if 'Darwin' in platform.system():&amp;#10;    if use_retina:&amp;#10;        scn_width = int(scn_width/2.0)&amp;#10;        scn_height = int(scn_height/2.0)&amp;#10;&amp;#10;# Pass the display pixel coordinates (left, top, right, bottom) to the tracker&amp;#10;# see the EyeLink Installation Guide, &quot;Customizing Screen Settings&quot;&amp;#10;el_coords = &quot;screen_pixel_coords = 0 0 %d %d&quot; % (scn_width - 1, scn_height - 1)&amp;#10;el_tracker.sendCommand(el_coords)&amp;#10;&amp;#10;# Write a DISPLAY_COORDS message to the EDF file&amp;#10;# Data Viewer needs this piece of info for proper visualization, see Data&amp;#10;# Viewer User Manual, &quot;Protocol for EyeLink Data to Viewer Integration&quot;&amp;#10;dv_coords = &quot;DISPLAY_COORDS  0 0 %d %d&quot; % (scn_width - 1, scn_height - 1)&amp;#10;el_tracker.sendMessage(dv_coords)&amp;#10;&amp;#10;&amp;#10;# Configure a graphics environment (genv) for tracker calibration&amp;#10;genv = EyeLinkCoreGraphicsPsychoPy(el_tracker, win)&amp;#10;print(genv)  # print out the version number of the CoreGraphics library&amp;#10;&amp;#10;# Set background and foreground colors for the calibration target&amp;#10;# in PsychoPy, (-1, -1, -1)=black, (1, 1, 1)=white, (0, 0, 0)=mid-gray&amp;#10;foreground_color = (1, 1, 1)&amp;#10;background_color = win.color&amp;#10;genv.setCalibrationColors(foreground_color, background_color)&amp;#10;&amp;#10;# Set up the calibration target&amp;#10;#&amp;#10;&amp;#10;# Use the default calibration target ('circle')&amp;#10;genv.setTargetType('circle')&amp;#10;&amp;#10;# Configure the size of the calibration target (in pixels)&amp;#10;# this option applies only to &quot;circle&quot; and &quot;spiral&quot; targets&amp;#10;genv.setTargetSize(28)&amp;#10;&amp;#10;# Beeps to play during calibration, validation and drift correction&amp;#10;# parameters: target, good, error&amp;#10;#     target -- sound to play when target moves&amp;#10;#     good -- sound to play on successful operation&amp;#10;#     error -- sound to play on failure or interruption&amp;#10;# Each parameter could be ''--default sound, 'off'--no sound, or a wav file&amp;#10;genv.setCalibrationSounds('off', 'off', 'off')&amp;#10;&amp;#10;# resolution fix for macOS retina display issues&amp;#10;if use_retina:&amp;#10;    genv.fixMacRetinaDisplay()&amp;#10;&amp;#10;# Request Pylink to use the PsychoPy window we opened above for calibration&amp;#10;pylink.openGraphicsEx(genv)&amp;#10;&amp;#10;# ##############################################################################&amp;#10;# define a few helper functions for trial handling&amp;#10;# ##############################################################################&amp;#10;&amp;#10;def clear_screen(win):&amp;#10;    &quot;&quot;&quot; clear up the PsychoPy window&quot;&quot;&quot;&amp;#10;&amp;#10;    win.fillColor = genv.getBackgroundColor()&amp;#10;    win.flip()&amp;#10;&amp;#10;&amp;#10;def show_msg(win, text, wait_for_keypress=True):&amp;#10;    &quot;&quot;&quot; Show task instructions on screen&quot;&quot;&quot;&amp;#10;&amp;#10;    msg = visual.TextStim(win, text,&amp;#10;                          font='Arial',&amp;#10;                          pos=(0, 0), height=0.03, ori=0,&amp;#10;                          color='black', colorSpace='rgb', opacity=1,&amp;#10;                          languageStyle='LTR', depth=0.0,&amp;#10;                          wrapWidth=scn_width/2,&amp;#10;                          units='height')&amp;#10;&amp;#10;    clear_screen(win)&amp;#10;    msg.draw()&amp;#10;    win.flip()&amp;#10;&amp;#10;    # wait indefinitely, terminates upon any key press&amp;#10;    if wait_for_keypress:&amp;#10;        event.waitKeys()&amp;#10;        clear_screen(win)&amp;#10;&amp;#10;&amp;#10;def terminate_task():&amp;#10;    &quot;&quot;&quot;&amp;#10;    Terminate the task gracefully and retrieve the EDF data file&amp;#10;&amp;#10;    file_to_retrieve: The EDF on the Host that we would like to download&amp;#10;    win: the current window used by the experimental script&amp;#10;    &quot;&quot;&quot;&amp;#10;&amp;#10;    el_tracker = pylink.getEYELINK()&amp;#10;&amp;#10;    if el_tracker.isConnected():&amp;#10;        # Terminate the current trial first if the task terminated prematurely&amp;#10;        error = el_tracker.isRecording()&amp;#10;        if error == pylink.TRIAL_OK:&amp;#10;            abort_trial()&amp;#10;&amp;#10;        # Put tracker in Offline mode&amp;#10;        el_tracker.setOfflineMode()&amp;#10;&amp;#10;        # Clear the Host PC screen and wait for 500 ms&amp;#10;        el_tracker.sendCommand('clear_screen 0')&amp;#10;        pylink.msecDelay(500)&amp;#10;&amp;#10;        # Close the edf data file on the Host&amp;#10;        el_tracker.closeDataFile()&amp;#10;&amp;#10;        # Show a file transfer message on the screen&amp;#10;        msg = 'EDF data is transferring from EyeLink Host PC...'&amp;#10;        show_msg(win, msg, wait_for_keypress=False)&amp;#10;&amp;#10;        # Download the EDF data file from the Host PC to a local data folder&amp;#10;        # parameters: source_file_on_the_host, destination_file_on_local_drive&amp;#10;        local_edf = os.path.join(session_folder, session_identifier + '.edf')&amp;#10;        try:&amp;#10;            el_tracker.receiveDataFile(edf_file, local_edf)&amp;#10;        except RuntimeError as error:&amp;#10;            print('ERROR:', error)&amp;#10;&amp;#10;        # Close the link to the tracker.&amp;#10;        el_tracker.close()&amp;#10;&amp;#10;&amp;#10;def abort_trial():&amp;#10;    &quot;&quot;&quot;Ends recording&quot;&quot;&quot;&amp;#10;&amp;#10;    el_tracker = pylink.getEYELINK()&amp;#10;&amp;#10;    # Stop recording&amp;#10;    if el_tracker.isRecording():&amp;#10;        # add 100 ms to catch final trial events&amp;#10;        pylink.pumpDelay(100)&amp;#10;        el_tracker.stopRecording()&amp;#10;&amp;#10;    # clear the screen&amp;#10;    clear_screen(win)&amp;#10;    # Send a message to clear the Data Viewer screen&amp;#10;    bgcolor_RGB = (116, 116, 116)&amp;#10;    el_tracker.sendMessage('!V CLEAR %d %d %d' % bgcolor_RGB)&amp;#10;&amp;#10;    # send a message to mark trial end&amp;#10;    el_tracker.sendMessage('TRIAL_RESULT %d' % pylink.TRIAL_ERROR)&amp;#10;&amp;#10;    return pylink.TRIAL_ERROR&amp;#10;&amp;#10;&amp;#10;if expInfo['Calibrate']:&amp;#10;    # Show the task instructions&amp;#10;    if not dummy_mode:&amp;#10;        task_msg = 'In a moment, we will calibrate the eye tracker.\n' + \&amp;#10;                   'Please look at the dots whenever they appear on the screen.\n\n' + \&amp;#10;                   'Press ENTER twice to open the calibration menu.'&amp;#10;        show_msg(win, task_msg)&amp;#10;        # Set up the camera and calibrate the tracker, if not running in dummy mode&amp;#10;        try:&amp;#10;            el_tracker.doTrackerSetup()&amp;#10;        except RuntimeError as err:&amp;#10;            print('ERROR during calibration:', err)&amp;#10;            el_tracker.exitCalibration()&amp;#10;&amp;#10;# ------Start EyeLink Recording-------&amp;#10;# put tracker in idle/offline mode before recording&amp;#10;el_tracker.setOfflineMode()&amp;#10;&amp;#10;# Start recording, at the beginning of a new run&amp;#10;# arguments: sample_to_file, events_to_file, sample_over_link,&amp;#10;# event_over_link (1-yes, 0-no)&amp;#10;try:&amp;#10;    el_tracker.startRecording(1, 1, 1, 1)&amp;#10;except RuntimeError as error:&amp;#10;    print(&quot;ERROR:&quot;, error)&amp;#10;    terminate_task()&amp;#10;&amp;#10;# Allocate some time for the tracker to cache some samples&amp;#10;pylink.pumpDelay(100)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="if expInfo['EyeLink']:&amp;#10;    # send a 'TRIAL_RESULT' message to mark the end of trial, see Data&amp;#10;    # Viewer User Manual, &quot;Protocol for EyeLink Data to Viewer Integration&quot;&amp;#10;    el_tracker.sendMessage('TRIAL_RESULT %d' % pylink.TRIAL_OK)&amp;#10;&amp;#10;    # stop recording; add 100 msec to catch final events before stopping&amp;#10;    pylink.pumpDelay(100)&amp;#10;    el_tracker.stopRecording()&amp;#10;&amp;#10;    terminate_task() # EyeLink exit" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="EyelinkCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_start" plugin="None">
        <Param val="import platform&amp;#10;import time&amp;#10;import random as randomITI&amp;#10;#from hardware.EyeLinkCoreGraphicsPsychoPy import EyeLinkCoreGraphicsPsychoPy&amp;#10;from psychopy import monitors&amp;#10;from string import ascii_letters, digits&amp;#10;&amp;#10;upright_flag=0&amp;#10;inverted_flag=0&amp;#10;msg=&quot;&quot;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="win.mouseVisible = False&amp;#10;&amp;#10;# determine block order&amp;#10;if expInfo['order']==1:&amp;#10;    order_list=&quot;stimuli/faces_blockList1.csv&quot;&amp;#10;elif expInfo['order']==2:&amp;#10;    order_list=&quot;stimuli/faces_blockList2.csv&quot;&amp;#10;elif expInfo['order']==3:&amp;#10;    order_list=&quot;stimuli/faces_blockList3.csv&quot;&amp;#10;elif expInfo['order']==4:&amp;#10;    order_list=&quot;stimuli/faces_blockList4.csv&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_start" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="ITI">
      <RoutineSettingsComponent name="ITI" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ITI" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_iti" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// iti_dur + random number between 0 and 0.2&amp;#10;iti_jittered = (iti_dur + Math.random()* 0.2);  &amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="EEGtriggerSent = False&amp;#10;EYEtriggerSent = False&amp;#10;&amp;#10;# iti_dur + random number between 0 and 0.3&amp;#10;iti_jittered=iti_dur+randomITI.uniform(0, 0.3)&amp;#10;thisExp.addData(&quot;iti_jittered&quot;, iti_jittered)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if expInfo['EEG'] and text_iti.status == STARTED and not EEGtriggerSent:&amp;#10;    #win.callOnFlip(ns.send_event,event_type=&quot;ITI+&quot;,label=&quot;ITI+&quot;,duration=float(isi_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    EEGtriggerSent = True&amp;#10;if expInfo['EyeLink'] and text_iti.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(el_tracker.sendMessage,&quot;ITI&quot;)&amp;#10;    EYEtriggerSent = True&amp;#10;if expInfo['EyeTribe'] and text_iti.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(tracker.log_message,&quot;ITI&quot;)&amp;#10;    EYEtriggerSent = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if expInfo['EyeLink']:&amp;#10;    # record trial variables to the EDF data file, for details, see Data&amp;#10;    # Viewer User Manual, &quot;Protocol for EyeLink Data to Viewer Integration&quot;&amp;#10;    el_tracker.sendMessage('!V TRIAL_VAR condition %s' % cond)&amp;#10;    el_tracker.sendMessage('!V TRIAL_VAR orientation %s' % orient)&amp;#10;    el_tracker.sendMessage('!V TRIAL_VAR image_target %s' % target_list)&amp;#10;    el_tracker.sendMessage('!V TRIAL_VAR image_probe_left %s' % probe_L)&amp;#10;    el_tracker.sendMessage('!V TRIAL_VAR image_probe_right %s' % probe_R)&amp;#10;    #el_tracker.sendMessage('!V TRIAL_VAR RT %d' % RT)&amp;#10;    # send a 'TRIAL_RESULT' message to mark the end of trial, see Data&amp;#10;    # Viewer User Manual, &quot;Protocol for EyeLink Data to Viewer Integration&quot;&amp;#10;    el_tracker.sendMessage('TRIAL_RESULT %d' % pylink.TRIAL_OK)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_iti" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_iti" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="2" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_iti" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="iti_jittered" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="ISI">
      <RoutineSettingsComponent name="ISI" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ISI" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_isi" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="EEGtriggerSent = False&amp;#10;EYEtriggerSent = False&amp;#10;&amp;#10;# isi_dur + random number between 0 and 0.2&amp;#10;isi_jittered=isi_dur+randomITI.uniform(0, 0.2)&amp;#10;thisExp.addData(&quot;isi_jittered&quot;, isi_jittered)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if expInfo['EEG'] and text_isi.status == STARTED and not EEGtriggerSent:&amp;#10;    #win.callOnFlip(ns.send_event,event_type=&quot;ISI+&quot;,label=ISI,duration=float(maint_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    EEGtriggerSent = True&amp;#10;if expInfo['EyeLink'] and text_isi.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(el_tracker.sendMessage,&quot;ISI+&quot;)&amp;#10;    EYEtriggerSent = True&amp;#10;if expInfo['EyeTribe'] and text_isi.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(tracker.log_message,&quot;ISI+&quot;) # fixation marker&amp;#10;    EYEtriggerSent = True&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_isi" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_isi" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="2" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_isi" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="isi_jittered" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="FB_Practice">
      <RoutineSettingsComponent name="FB_Practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="FB_Practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_FB_Practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="resp = psychoJS.experiment._trialsData;&amp;#10;// Get count of correct trials&amp;#10;acc = 0;&amp;#10;sumRt = 0;&amp;#10;num = 0;&amp;#10;//acc = resp.reduce((a, b) =&gt; a + b['key_resp_face.corr'], 0);&amp;#10;// Get Trial Length&amp;#10;//num = resp.length;&amp;#10;//num=trials_practice.thisN;&amp;#10;&amp;#10;// Mean RTs:&amp;#10;for (let eachResp=0; eachResp&lt;resp.length; eachResp++) {&amp;#10;  if ('key_resp_prac.rt' in resp[eachResp]) {&amp;#10;    sumRt += resp[eachResp]['key_resp_prac.rt'];&amp;#10;    acc += resp[eachResp]['key_resp_prac.corr'];&amp;#10;    num += 1;&amp;#10;  }&amp;#10;}&amp;#10;meanRt=(sumRt/num);&amp;#10;//console.log(sumRt)&amp;#10;pacc=( acc / num ) * 100;&amp;#10;//console.log(pacc)&amp;#10;&amp;#10;//message for display&amp;#10;msg = &quot;You got &quot;+String(parseFloat(pacc).toFixed(2))+&quot;% correct. \nYour response time is &quot;+String(parseFloat(meanRt).toFixed(2))+&quot; sec.&quot;;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# get reaction time and accuracy&amp;#10;pmeanRT_up = trials_practice_up.data['key_resp_up_prac.rt'].mean()&amp;#10;pacc_up = trials_practice_up.data['key_resp_up_prac.corr'].sum()&amp;#10;# calculate percent accuracy&amp;#10;num_up = trials_practice_up.nTotal&amp;#10;&amp;#10;# get reaction time and accuracy&amp;#10;pmeanRT_inv = trials_practice_inv.data['key_resp_inv_prac.rt'].mean()&amp;#10;pacc_inv = trials_practice_inv.data['key_resp_inv_prac.corr'].sum()&amp;#10;# calculate percent accuracy&amp;#10;num_inv = trials_practice_inv.nTotal&amp;#10;&amp;#10;pmeanRT=(pmeanRT_up+pmeanRT_inv)/2 # mean RT&amp;#10;pacc=(pacc_up+pacc_inv)/2 # mean accuracy&amp;#10;num=num_up+num_inv # total N&amp;#10;ppacc=(pacc/num)*100&amp;#10;# message for display&amp;#10;msg = &quot;You got %0.2f %% correct. \nYour response time is %0.2f sec.&quot; %(ppacc,pmeanRT)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_FB_Practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_Practice" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="10" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_Practice" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg + &quot;\n\n Please remember to press the LEFT BUTTON to choose the image on the left, or press the RIGHT BUTTON to choose the image on the right. Try to make your choice as quickly and accurately as possible.&quot; + &quot;\n\n Press SPACEBAR to start.&quot; " valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_endPractice" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="10" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_endPractice" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrPractice">
      <RoutineSettingsComponent name="instrPractice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instrPractice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_practice" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_practice" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$&quot;In this task, you will see images of faces.&quot; + &quot;\n During each trial, one image will flash before you—this is the target image. Afterward, two images will appear side by side. Your task is to select the image that looks exactly like the target image.&quot; + &quot;\n\n Please press the LEFT BUTTON to choose the image on the left, or press the RIGHT BUTTON to choose the image on the right. Try to make your choice as quickly and accurately as possible.&quot; + &quot;\n\n Press SPACEBAR to practice.&quot;" valType="extendedStr" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_practice" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_practice" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ThankYou">
      <RoutineSettingsComponent name="ThankYou" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ThankYou" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_thanks" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_thanks" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$&quot;Thank you for your participation!&quot; + &quot;\n\n Please wait until the task is complete before exiting the browser.&quot;" valType="extendedStr" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="IBI">
      <RoutineSettingsComponent name="IBI" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="IBI" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_ibi" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_ibi" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="EncodingUpright">
      <RoutineSettingsComponent name="EncodingUpright" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="EncodingUpright" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_encode_upright" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="EEGtriggerSent = False&amp;#10;EYEtriggerSent = False&amp;#10;orient = &quot;upright&quot; # trial categorization &amp;#10;# Add the variable to a new column in the output file&amp;#10;thisExp.addData(&quot;orient&quot;, orient)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if expInfo['EEG'] and image_target_upright.status == STARTED and not EEGtriggerSent:&amp;#10;    #win.callOnFlip(ns.send_event,event_type=&quot;STIM&quot;,label=TRG,duration=float(target_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    EEGtriggerSent = True&amp;#10;if expInfo['EyeLink'] and image_target_upright.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(el_tracker.sendMessage,target_list)&amp;#10;    EYEtriggerSent = True&amp;#10;if expInfo['EyeTribe'] and image_target_upright.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(tracker.log_message,target_list)&amp;#10;    EYEtriggerSent = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_encode_upright" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="image_target_upright" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="2" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$target_list" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_target_upright" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$target_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
    </Routine>
    <Routine name="ProbeUpright">
      <RoutineSettingsComponent name="ProbeUpright" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ProbeUpright" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_probe_upright" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="EEGtriggerSent = False&amp;#10;EYEtriggerSent = False&amp;#10;&amp;#10;EEGrspprobe=0&amp;#10;EYErspprobe=0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if expInfo['EEG'] and image_probe_upright_left.status == STARTED and not EEGtriggerSent:&amp;#10;    #win.callOnFlip(ns.send_event,event_type=&quot;PRB+&quot;,label=PRB,duration=float(probe_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    EEGtriggerSent = True&amp;#10;if expInfo['EyeLink'] and image_probe_upright_left.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(el_tracker.sendMessage,probe_L)&amp;#10;    win.callOnFlip(el_tracker.sendMessage,probe_R)&amp;#10;    EYEtriggerSent = True&amp;#10;if expInfo['EyeTribe'] and image_probe_upright_left.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(tracker.log_message,probe_L)&amp;#10;    win.callOnFlip(tracker.log_message,probe_R)&amp;#10;    EYEtriggerSent = True&amp;#10;&amp;#10;## Look for Key Response&amp;#10;if key_resp_upright:&amp;#10;    if key_resp_upright.keys=='1':&amp;#10;        if expInfo['EEG'] and EEGrspprobe==0:&amp;#10;            #ns.send_event(event_type=&quot;RESP&quot;,label=&quot;RSPL&quot;)&amp;#10;            EEGrspprobe=1&amp;#10;        if expInfo['EyeLink'] and EYErspprobe==0:&amp;#10;            win.callOnFlip(el_tracker.sendMessage,'RSPL')&amp;#10;            EYErspprobe=1&amp;#10;        if expInfo['EyeTribe'] and EYErspprobe==0:&amp;#10;            win.callOnFlip(tracker.log_message,'RSPL')&amp;#10;            EYErspprobe=1&amp;#10;    elif key_resp_upright.keys=='2':&amp;#10;        if expInfo['EEG'] and EEGrspprobe==0:&amp;#10;            #ns.send_event(event_type=&quot;RESP&quot;,label=&quot;RSPR&quot;)&amp;#10;            EEGrspprobe=1&amp;#10;        if expInfo['EyeLink'] and EYErspprobe==0:&amp;#10;            win.callOnFlip(el_tracker.sendMessage,'RSPR')&amp;#10;            EYErspprobe=1&amp;#10;        if expInfo['EyeTribe'] and EYErspprobe==0:&amp;#10;            win.callOnFlip(tracker.log_message,'RSPR')&amp;#10;            EYErspprobe=1" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (key_resp_upright) {&amp;#10;    if ((key_resp_upright.keys === &quot;1&quot;) || (key_resp_upright.keys === &quot;left&quot;)) {&amp;#10;        prbL = &quot;blue&quot;;&amp;#10;    } else {&amp;#10;        if ((key_resp_upright.keys === &quot;2&quot;) || (key_resp_upright.keys === &quot;right&quot;)) {&amp;#10;            prbR = &quot;blue&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="s_key = key_resp.keys;&amp;#10;if ((s_key === &quot;s&quot;)) {&amp;#10;    trials.finished = true;&amp;#10;}&amp;#10;&amp;#10;thisExp=psychoJS.experiment;&amp;#10;&amp;#10;if ((correct_resp === 1) || (correct_resp === &quot;1&quot;)) {&amp;#10;    correctKey = [&quot;1&quot;,&quot;left&quot;];&amp;#10;}&amp;#10;if ((correct_resp === 2) || (correct_resp === &quot;2&quot;)) {&amp;#10;    correctKey = [&quot;2&quot;,&quot;right&quot;];&amp;#10;}&amp;#10;&amp;#10;if ((key_resp.keys === correctKey[0]) || (key_resp.keys === correctKey[1])) {&amp;#10;    key_resp.corr = true;&amp;#10;} else {&amp;#10;    key_resp.corr = false;&amp;#10;}&amp;#10;&amp;#10;thisExp.addData(&quot;correctKey&quot;, correctKey);&amp;#10;thisExp.addData(&quot;key_resp_corr&quot;, key_resp.corr)" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if expInfo['EEG'] and rspprobe==0:&amp;#10;    #ns.send_event(event_type=&quot;RESP&quot;,label=&quot;MISS&quot;)&amp;#10;    EEGrspprobe=1&amp;#10;if expInfo['EyeLink'] and rspprobe==0:&amp;#10;    win.callOnFlip(el_tracker.sendMessage,'MISS')&amp;#10;    EYErspprobe=1&amp;#10;if expInfo['EyeTribe'] and rspprobe==0:&amp;#10;    win.callOnFlip(tracker.log_message,'MISS')&amp;#10;    EYErspprobe=1" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_probe_upright" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="image_probe_upright_left" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$probe_L" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_probe_upright_left" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-0.25, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="image_probe_upright_right" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$probe_R" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_probe_upright_right" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.25, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_upright" plugin="None">
        <Param val="'1','left','2','right','s'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_upright" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="EncodingInverted">
      <RoutineSettingsComponent name="EncodingInverted" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="EncodingInverted" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_encode_inverted" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="EEGtriggerSent = False&amp;#10;EYEtriggerSent = False&amp;#10;orient = &quot;inverted&quot; # trial categorization&amp;#10;# Add the variable to a new column in the output file&amp;#10;thisExp.addData(&quot;orient&quot;, orient)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if expInfo['EEG'] and image_target_inverted.status == STARTED and not EEGtriggerSent:&amp;#10;    win.callOnFlip(ns.send_event,event_type=&quot;STIM&quot;,label=TRG,duration=float(target_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    EEGtriggerSent = True&amp;#10;if expInfo['EyeLink'] and image_target_inverted.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(el_tracker.sendMessage,target_list)&amp;#10;    EYEtriggerSent = True&amp;#10;if expInfo['EyeTribe'] and image_target_inverted.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(tracker.log_message,target_list)&amp;#10;    EYEtriggerSent = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_encode_inverted" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="image_target_inverted" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="2" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="True" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$target_list" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_target_inverted" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$target_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
    </Routine>
    <Routine name="ProbeInverted">
      <RoutineSettingsComponent name="ProbeInverted" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ProbeInverted" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_probe_inverted" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="EEGtriggerSent = False&amp;#10;EYEtriggerSent = False&amp;#10;&amp;#10;EEGrspprobe=0&amp;#10;EYErspprobe=0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if expInfo['EEG'] and image_probe_inverted_left.status == STARTED and not EEGtriggerSent:&amp;#10;    #win.callOnFlip(ns.send_event,event_type=&quot;PRB+&quot;,label=PRB,duration=float(probe_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    EEGtriggerSent = True&amp;#10;if expInfo['EyeLink'] and image_probe_inverted_left.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(el_tracker.sendMessage,probe_L)&amp;#10;    win.callOnFlip(el_tracker.sendMessage,probe_R)&amp;#10;    EYEtriggerSent = True&amp;#10;if expInfo['EyeTribe'] and image_probe_inverted_left.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(tracker.log_message,probe_L)&amp;#10;    win.callOnFlip(tracker.log_message,probe_R)&amp;#10;    EYEtriggerSent = True&amp;#10;&amp;#10;## Look for Key Response&amp;#10;if key_resp_inverted:&amp;#10;    if key_resp_inverted.keys=='1':&amp;#10;        if expInfo['EEG'] and EEGrspprobe==0:&amp;#10;            #ns.send_event(event_type=&quot;RESP&quot;,label=&quot;RSPL&quot;)&amp;#10;            EEGrspprobe=1&amp;#10;        if expInfo['EyeLink'] and EYErspprobe==0:&amp;#10;            win.callOnFlip(el_tracker.sendMessage,'RSPL')&amp;#10;            EYErspprobe=1&amp;#10;        if expInfo['EyeTribe'] and EYErspprobe==0:&amp;#10;            win.callOnFlip(tracker.log_message,'RSPL')&amp;#10;            EYErspprobe=1&amp;#10;    elif key_resp_inverted.keys=='2':&amp;#10;        if expInfo['EEG'] and EEGrspprobe==0:&amp;#10;            ns.send_event(event_type=&quot;RESP&quot;,label=&quot;RSPR&quot;)&amp;#10;            EEGrspprobe=1&amp;#10;        if expInfo['EyeLink'] and EYErspprobe==0:&amp;#10;            win.callOnFlip(el_tracker.sendMessage,'RSPR')&amp;#10;            EYErspprobe=1&amp;#10;        if expInfo['EyeTribe'] and EYErspprobe==0:&amp;#10;            win.callOnFlip(tracker.log_message,'RSPR')&amp;#10;            EYErspprobe=1" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (key_resp_inverted) {&amp;#10;    if ((key_resp_inverted.keys === &quot;1&quot;) || (key_resp.keys === &quot;left&quot;)) {&amp;#10;        prbL = &quot;blue&quot;;&amp;#10;    } else {&amp;#10;        if ((key_resp_inverted.keys === &quot;2&quot;) || (key_resp.keys === &quot;right&quot;)) {&amp;#10;            prbR = &quot;blue&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="s_key = key_resp_inverted.keys;&amp;#10;if ((s_key === &quot;s&quot;)) {&amp;#10;    trials.finished = true;&amp;#10;}&amp;#10;&amp;#10;thisExp=psychoJS.experiment;&amp;#10;&amp;#10;if ((correct_resp === 1) || (correct_resp === &quot;1&quot;)) {&amp;#10;    correctKey = [&quot;1&quot;,&quot;left&quot;];&amp;#10;}&amp;#10;if ((correct_resp === 2) || (correct_resp === &quot;2&quot;)) {&amp;#10;    correctKey = [&quot;2&quot;,&quot;right&quot;];&amp;#10;}&amp;#10;&amp;#10;if ((key_resp_inverted.keys === correctKey[0]) || (key_resp_inverted.keys === correctKey[1])) {&amp;#10;    key_resp_inverted.corr = true;&amp;#10;} else {&amp;#10;    key_resp_inverted.corr = false;&amp;#10;}&amp;#10;&amp;#10;thisExp.addData(&quot;correctKey&quot;, correctKey);&amp;#10;thisExp.addData(&quot;key_resp_corr&quot;, key_resp.corr)" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if expInfo['EEG'] and rspprobe==0:&amp;#10;    #ns.send_event(event_type=&quot;RESP&quot;,label=&quot;MISS&quot;)&amp;#10;    EEGrspprobe=1&amp;#10;if expInfo['EyeLink'] and rspprobe==0:&amp;#10;    win.callOnFlip(el_tracker.sendMessage,'MISS')&amp;#10;    EYErspprobe=1&amp;#10;if expInfo['EyeTribe'] and rspprobe==0:&amp;#10;    win.callOnFlip(tracker.log_message,'MISS')&amp;#10;    EYErspprobe=1" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_probe_inverted" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="image_probe_inverted_left" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="True" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$probe_L" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_probe_inverted_left" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-0.25, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="image_probe_inverted_right" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="True" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$probe_R" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_probe_inverted_right" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.25, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_inverted" plugin="None">
        <Param val="'1','left','2','right','s'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_inverted" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="FeedbackUpright">
      <RoutineSettingsComponent name="FeedbackUpright" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="FeedbackUpright" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_upright_Feedback" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="resp = psychoJS.experiment._trialsData;&amp;#10;// Get count of correct trials&amp;#10;acc = 0;&amp;#10;sumRt = 0;&amp;#10;num = 0;&amp;#10;//acc = resp.reduce((a, b) =&gt; a + b['key_resp.corr'], 0);&amp;#10;// Get Trial Length&amp;#10;//num = resp.length;&amp;#10;//num=trials_upright.thisN;&amp;#10;&amp;#10;// Mean RTs:&amp;#10;for (let eachResp=0; eachResp&lt;resp.length; eachResp++) &amp;#10;{&amp;#10;  if ('key_resp.rt' in resp[eachResp]) {&amp;#10;    sumRt += resp[eachResp]['key_resp.rt'];&amp;#10;    acc += resp[eachResp]['key_resp.corr'];&amp;#10;    num += 1;&amp;#10;  }&amp;#10;}&amp;#10;meanRt=(sumRt/num);&amp;#10;//console.log(sumRt)&amp;#10;pacc=( acc / num ) * 100;&amp;#10;//console.log(pacc)&amp;#10;&amp;#10;//message for display&amp;#10;msg = &quot;You got &quot;+String(parseFloat(pacc).toFixed(2))+&quot;% correct. \nYour response time is &quot;+String(parseFloat(meanRt).toFixed(2))+&quot; sec.&quot;;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# get reaction time and accuracy&amp;#10;meanRt = trials_upright.data['key_resp_upright.rt'].mean()&amp;#10;acc = trials_upright.data['key_resp_upright.corr'].sum()&amp;#10;# calculate percent accuracy&amp;#10;num = trials_upright.nTotal&amp;#10;pacc=(acc/num)*100&amp;#10;# message for display&amp;#10;msg = &quot;Great Job !!!!!!\n\nYou got %0.2f %% correct. \nYour response time is %.2f sec.&quot; %(pacc,meanRt) &amp;#10;&amp;#10;core.wait(5) # sleep 5 seconds&amp;#10;#if expInfo['EEG']:&amp;#10;    #ns.send_event(event_type=&quot;STOP&quot;)&amp;#10;    #ns.end_rec()&amp;#10;    #ns.disconnect()&amp;#10;#if expInfo['EyeLink']:&amp;#10;    #&amp;#10;#if expInfo['EyeTribe']:&amp;#10;    #tracker.log_message(&quot;Block_End&quot;) # stop recording&amp;#10;    #tracker.stop_recording()&amp;#10;    # close connection to the tracker&amp;#10;    #tracker.close()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_upright_Feedback" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_upright_feedback" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_upright_feedback" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="FeedbackInverted">
      <RoutineSettingsComponent name="FeedbackInverted" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="FeedbackInverted" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_inverted_Feedback" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="resp = psychoJS.experiment._trialsData;&amp;#10;// Get count of correct trials&amp;#10;acc = 0;&amp;#10;sumRt = 0;&amp;#10;num = 0;&amp;#10;//acc = resp.reduce((a, b) =&gt; a + b['key_resp.corr'], 0);&amp;#10;// Get Trial Length&amp;#10;//num = resp.length;&amp;#10;//num=trials_upright.thisN;&amp;#10;&amp;#10;// Mean RTs:&amp;#10;for (let eachResp=0; eachResp&lt;resp.length; eachResp++) &amp;#10;{&amp;#10;  if ('key_resp.rt' in resp[eachResp]) {&amp;#10;    sumRt += resp[eachResp]['key_resp.rt'];&amp;#10;    acc += resp[eachResp]['key_resp.corr'];&amp;#10;    num += 1;&amp;#10;  }&amp;#10;}&amp;#10;meanRt=(sumRt/num);&amp;#10;//console.log(sumRt)&amp;#10;pacc=( acc / num ) * 100;&amp;#10;//console.log(pacc)&amp;#10;&amp;#10;//message for display&amp;#10;msg = &quot;You got &quot;+String(parseFloat(pacc).toFixed(2))+&quot;% correct. \nYour response time is &quot;+String(parseFloat(meanRt).toFixed(2))+&quot; sec.&quot;;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# get reaction time and accuracy&amp;#10;meanRt = trials_upright.data['key_resp_inverted.rt'].mean()&amp;#10;acc = trials_upright.data['key_resp_inverted.corr'].sum()&amp;#10;# calculate percent accuracy&amp;#10;num = trials_upright.nTotal&amp;#10;pacc=(acc/num)*100&amp;#10;# message for display&amp;#10;msg = &quot;Great Job !!!!!!\n\nYou got %0.2f %% correct. \nYour response time is %.2f sec.&quot; %(pacc,meanRt) &amp;#10;&amp;#10;core.wait(5) # sleep 5 seconds&amp;#10;#if expInfo['EEG']:&amp;#10;    #ns.send_event(event_type=&quot;STOP&quot;)&amp;#10;    #ns.end_rec()&amp;#10;    #ns.disconnect()&amp;#10;#if expInfo['EyeLink']:&amp;#10;    #&amp;#10;#if expInfo['EyeTribe']:&amp;#10;    #tracker.log_message(&quot;STOP&quot;) # stop recording&amp;#10;    #tracker.stop_recording()&amp;#10;    # close connection to the tracker&amp;#10;    #tracker.close()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_inverted_Feedback" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_inverted_feedback" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_inverted_feedback" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="ProbeUpPractice">
      <RoutineSettingsComponent name="ProbeUpPractice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ProbeUpPractice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_probePrac_up" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="EEGtriggerSent = False&amp;#10;EYEtriggerSent = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if expInfo['EEG'] and image_probePrac_up_left.status == STARTED and not EEGtriggerSent:&amp;#10;    #win.callOnFlip(ns.send_event,event_type=&quot;STIM&quot;,label=TRG,duration=float(target_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    #win.callOnFlip(ns.send_event,event_type=&quot;STIM&quot;,label=TRG,duration=float(target_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    EEGtriggerSent = True&amp;#10;if expInfo['EyeLink'] and image_probePrac_up_left.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(el_tracker.sendMessage,probe_L)&amp;#10;    win.callOnFlip(el_tracker.sendMessage,probe_R)&amp;#10;    EYEtriggerSent = True&amp;#10;if expInfo['EyeTribe'] and image_probePrac_up_left.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(tracker.log_message,probe_L)&amp;#10;    win.callOnFlip(tracker.log_message,probe_R)&amp;#10;    EYEtriggerSent = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="s_key = key_resp_prac.keys;&amp;#10;if ((s_key === &quot;s&quot;)) {&amp;#10;    trials_practice.finished = true;&amp;#10;}&amp;#10;&amp;#10;thisExp=psychoJS.experiment;&amp;#10;&amp;#10;if ((correct_resp === 1) || (correct_resp === &quot;1&quot;)) {&amp;#10;    correctKey = [&quot;1&quot;,&quot;left&quot;];&amp;#10;}&amp;#10;if ((correct_resp === 2) || (correct_resp === &quot;2&quot;)) {&amp;#10;    correctKey = [&quot;2&quot;,&quot;right&quot;];&amp;#10;}&amp;#10;&amp;#10;if ((key_resp_prac.keys === correctKey[0]) || (key_resp_prac.keys === correctKey[1])) {&amp;#10;    key_resp_prac.corr = true;&amp;#10;} else {&amp;#10;    key_resp_prac.corr = false;&amp;#10;}&amp;#10;&amp;#10;thisExp.addData(&quot;correctKey&quot;, correctKey);&amp;#10;thisExp.addData(&quot;key_resp_corr&quot;, key_resp_prac.corr)" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_probePrac_up" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="image_probePrac_up_left" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$probe_L" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_probePrac_up_left" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-0.2, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="image_probePrace_up_right" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$probe_R" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_probePrace_up_right" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.2, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_up_prac" plugin="None">
        <Param val="'1','left','2','right','s'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_up_prac" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ProbeInvPractice">
      <RoutineSettingsComponent name="ProbeInvPractice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ProbeInvPractice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_probePrac_inv" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="EEGtriggerSent = False&amp;#10;EYEtriggerSent = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if expInfo['EEG'] and image_probePrac_inv_left.status == STARTED and not EEGtriggerSent:&amp;#10;    #win.callOnFlip(ns.send_event,event_type=&quot;STIM&quot;,label=TRG,duration=float(target_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    #win.callOnFlip(ns.send_event,event_type=&quot;STIM&quot;,label=TRG,duration=float(target_dur)) #Send the trigger, synced to the screen refresh&amp;#10;    EEGtriggerSent = True&amp;#10;if expInfo['EyeLink'] and image_probePrac_inv_left.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(el_tracker.sendMessage,probe_L)&amp;#10;    win.callOnFlip(el_tracker.sendMessage,probe_R)&amp;#10;    EYEtriggerSent = True&amp;#10;if expInfo['EyeTribe'] and image_probePrac_inv_left.status == STARTED and not EYEtriggerSent:&amp;#10;    win.callOnFlip(tracker.log_message,probe_L)&amp;#10;    win.callOnFlip(tracker.log_message,probe_R)&amp;#10;    EYEtriggerSent = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="s_key = key_resp_prac.keys;&amp;#10;if ((s_key === &quot;s&quot;)) {&amp;#10;    trials_practice.finished = true;&amp;#10;}&amp;#10;&amp;#10;thisExp=psychoJS.experiment;&amp;#10;&amp;#10;if ((correct_resp === 1) || (correct_resp === &quot;1&quot;)) {&amp;#10;    correctKey = [&quot;1&quot;,&quot;left&quot;];&amp;#10;}&amp;#10;if ((correct_resp === 2) || (correct_resp === &quot;2&quot;)) {&amp;#10;    correctKey = [&quot;2&quot;,&quot;right&quot;];&amp;#10;}&amp;#10;&amp;#10;if ((key_resp_prac.keys === correctKey[0]) || (key_resp_prac.keys === correctKey[1])) {&amp;#10;    key_resp_prac.corr = true;&amp;#10;} else {&amp;#10;    key_resp_prac.corr = false;&amp;#10;}&amp;#10;&amp;#10;thisExp.addData(&quot;correctKey&quot;, correctKey);&amp;#10;thisExp.addData(&quot;key_resp_corr&quot;, key_resp_prac.corr)" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_probePrac_inv" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="image_probePrac_inv_left" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="True" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$probe_L" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_probePrac_inv_left" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-0.2, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="image_probePrace_inv_right" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="True" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$probe_R" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_probePrace_inv_right" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.2, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_inv_prac" plugin="None">
        <Param val="'1','left','2','right','s'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_inv_prac" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Start"/>
    <Routine name="instrPractice"/>
    <LoopInitiator loopType="TrialHandler" name="blocks_practice">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block_list', 'stimuli/practice_stimuli.csv'), ('fix_dur', 0.5), ('target_dur', 5), ('isi_dur', 0.5), ('probe_dur', 3), ('iti_dur', 0.5), ('stim_size', 0.41)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="stimuli/practice_blockList.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="blocks_practice" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="getReady"/>
    <LoopInitiator loopType="TrialHandler" name="trials_practice_up">
      <Param name="Selected rows" updates="None" val="0:1" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('target_list', 'stimuli/inverted_faces/M125.png'), ('probe_L', 'stimuli/inverted_faces/M125morph.png'), ('probe_R', 'stimuli/inverted_faces/M125.png'), ('correct_resp', 2), ('stim_size', 0.3), ('direction', 'Upright')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M128.png'), ('probe_L', 'stimuli/inverted_faces/M128morph.png'), ('probe_R', 'stimuli/inverted_faces/M128.png'), ('correct_resp', 2), ('stim_size', 0.3), ('direction', 'Upright')]), OrderedDict([('target_list', 'stimuli/inverted_bodies/p4F20.png'), ('probe_L', 'stimuli/inverted_bodies/p4F20.png'), ('probe_R', 'stimuli/inverted_bodies/m4F07.png'), ('correct_resp', 1), ('stim_size', 0.3), ('direction', 'Upright')]), OrderedDict([('target_list', 'stimuli/inverted_bodies/p3F19.png'), ('probe_L', 'stimuli/inverted_bodies/m3F26.png'), ('probe_R', 'stimuli/inverted_bodies/p3F19.png'), ('correct_resp', 2), ('stim_size', 0.3), ('direction', 'Upright')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$block_list" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials_practice_up" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Fixation"/>
    <Routine name="EncodingUpright"/>
    <Routine name="ISI"/>
    <Routine name="ProbeUpPractice"/>
    <Routine name="ITI"/>
    <LoopTerminator name="trials_practice_up"/>
    <LoopInitiator loopType="TrialHandler" name="trials_practice_inv">
      <Param name="Selected rows" updates="None" val="2:3" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$block_list" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials_practice_inv" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Fixation"/>
    <Routine name="EncodingInverted"/>
    <Routine name="ISI"/>
    <Routine name="ProbeInvPractice"/>
    <Routine name="ITI"/>
    <LoopTerminator name="trials_practice_inv"/>
    <LoopTerminator name="blocks_practice"/>
    <Routine name="FB_Practice"/>
    <Routine name="getReady"/>
    <LoopInitiator loopType="TrialHandler" name="blocks_order">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block_list', 'stimuli/inverted_faces/faces_stimuli_UpShort.csv'), ('fix_dur', 0), ('target_dur', 0.5), ('isi_dur', 0.5), ('probe_dur', 3), ('iti_dur', 1), ('stim_size', 0.41), ('condStim', 'faces'), ('condDur', 'short'), ('condOrient', 'upright'), ('upright_flag', 1), ('inverted_flag', 0)]), OrderedDict([('block_list', 'stimuli/inverted_faces/faces_stimuli_UpLong.csv'), ('fix_dur', 0), ('target_dur', 5.0), ('isi_dur', 0.5), ('probe_dur', 3), ('iti_dur', 1), ('stim_size', 0.41), ('condStim', 'faces'), ('condDur', 'long'), ('condOrient', 'upright'), ('upright_flag', 1), ('inverted_flag', 0)]), OrderedDict([('block_list', 'stimuli/inverted_faces/faces_stimuli_InvShort.csv'), ('fix_dur', 0), ('target_dur', 0.5), ('isi_dur', 0.5), ('probe_dur', 3), ('iti_dur', 1), ('stim_size', 0.41), ('condStim', 'faces'), ('condDur', 'short'), ('condOrient', 'inverted'), ('upright_flag', 0), ('inverted_flag', 1)]), OrderedDict([('block_list', 'stimuli/inverted_faces/faces_stimuli_InvLong.csv'), ('fix_dur', 0), ('target_dur', 5.0), ('isi_dur', 0.5), ('probe_dur', 3), ('iti_dur', 1), ('stim_size', 0.41), ('condStim', 'faces'), ('condDur', 'long'), ('condOrient', 'inverted'), ('upright_flag', 0), ('inverted_flag', 1)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$order_list" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="blocks_order" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="trials_upright">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('target_list', 'stimuli/inverted_faces/F10.png'), ('probe_list', 'stimuli/inverted_faces/F10morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F11.png'), ('probe_list', 'stimuli/inverted_faces/F11morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F12.png'), ('probe_list', 'stimuli/inverted_faces/F12morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F13.png'), ('probe_list', 'stimuli/inverted_faces/F13morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F15.png'), ('probe_list', 'stimuli/inverted_faces/F15morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F18.png'), ('probe_list', 'stimuli/inverted_faces/F18morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F7.png'), ('probe_list', 'stimuli/inverted_faces/F7morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M121.png'), ('probe_list', 'stimuli/inverted_faces/M121morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M122.png'), ('probe_list', 'stimuli/inverted_faces/M122morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M126.png'), ('probe_list', 'stimuli/inverted_faces/M126morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M129.png'), ('probe_list', 'stimuli/inverted_faces/M129morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M21.png'), ('probe_list', 'stimuli/inverted_faces/M21morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M32.png'), ('probe_list', 'stimuli/inverted_faces/M32morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M35.png'), ('probe_list', 'stimuli/inverted_faces/M35morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F16.png'), ('probe_list', 'stimuli/inverted_faces/F16morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F21.png'), ('probe_list', 'stimuli/inverted_faces/F21morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F9.png'), ('probe_list', 'stimuli/inverted_faces/F9morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M119.png'), ('probe_list', 'stimuli/inverted_faces/M119morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M123.png'), ('probe_list', 'stimuli/inverted_faces/M123morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M125.png'), ('probe_list', 'stimuli/inverted_faces/M125morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M127.png'), ('probe_list', 'stimuli/inverted_faces/M127morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M128.png'), ('probe_list', 'stimuli/inverted_faces/M128morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M130.png'), ('probe_list', 'stimuli/inverted_faces/M130morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M131.png'), ('probe_list', 'stimuli/inverted_faces/M131morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M22.png'), ('probe_list', 'stimuli/inverted_faces/M22morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M25.png'), ('probe_list', 'stimuli/inverted_faces/M25morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M28.png'), ('probe_list', 'stimuli/inverted_faces/M28morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M31.png'), ('probe_list', 'stimuli/inverted_faces/M31morph.png')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$block_list" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="upright_flag" valType="code"/>
      <Param name="name" updates="None" val="trials_upright" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Fixation"/>
    <Routine name="EncodingUpright"/>
    <Routine name="ISI"/>
    <Routine name="ProbeUpright"/>
    <Routine name="ITI"/>
    <LoopTerminator name="trials_upright"/>
    <LoopInitiator loopType="TrialHandler" name="trials_inverted">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('target_list', 'stimuli/inverted_faces/F10.png'), ('probe_list', 'stimuli/inverted_faces/F10morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F11.png'), ('probe_list', 'stimuli/inverted_faces/F11morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F12.png'), ('probe_list', 'stimuli/inverted_faces/F12morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F13.png'), ('probe_list', 'stimuli/inverted_faces/F13morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F15.png'), ('probe_list', 'stimuli/inverted_faces/F15morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F18.png'), ('probe_list', 'stimuli/inverted_faces/F18morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F7.png'), ('probe_list', 'stimuli/inverted_faces/F7morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M121.png'), ('probe_list', 'stimuli/inverted_faces/M121morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M122.png'), ('probe_list', 'stimuli/inverted_faces/M122morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M126.png'), ('probe_list', 'stimuli/inverted_faces/M126morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M129.png'), ('probe_list', 'stimuli/inverted_faces/M129morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M21.png'), ('probe_list', 'stimuli/inverted_faces/M21morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M32.png'), ('probe_list', 'stimuli/inverted_faces/M32morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M35.png'), ('probe_list', 'stimuli/inverted_faces/M35morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F16.png'), ('probe_list', 'stimuli/inverted_faces/F16morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F21.png'), ('probe_list', 'stimuli/inverted_faces/F21morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/F9.png'), ('probe_list', 'stimuli/inverted_faces/F9morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M119.png'), ('probe_list', 'stimuli/inverted_faces/M119morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M123.png'), ('probe_list', 'stimuli/inverted_faces/M123morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M125.png'), ('probe_list', 'stimuli/inverted_faces/M125morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M127.png'), ('probe_list', 'stimuli/inverted_faces/M127morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M128.png'), ('probe_list', 'stimuli/inverted_faces/M128morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M130.png'), ('probe_list', 'stimuli/inverted_faces/M130morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M131.png'), ('probe_list', 'stimuli/inverted_faces/M131morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M22.png'), ('probe_list', 'stimuli/inverted_faces/M22morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M25.png'), ('probe_list', 'stimuli/inverted_faces/M25morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M28.png'), ('probe_list', 'stimuli/inverted_faces/M28morph.png')]), OrderedDict([('target_list', 'stimuli/inverted_faces/M31.png'), ('probe_list', 'stimuli/inverted_faces/M31morph.png')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$block_list" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="inverted_flag" valType="num"/>
      <Param name="name" updates="None" val="trials_inverted" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Fixation"/>
    <Routine name="EncodingInverted"/>
    <Routine name="ISI"/>
    <Routine name="ProbeInverted"/>
    <Routine name="ITI"/>
    <LoopTerminator name="trials_inverted"/>
    <Routine name="IBI"/>
    <LoopTerminator name="blocks_order"/>
    <Routine name="ThankYou"/>
  </Flow>
</PsychoPy2experiment>
